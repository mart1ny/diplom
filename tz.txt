Техническое задание (ТЗ) на проект: "Оптимизация работы светофоров на основе компьютерного зрения и анализа событий «почти-аварий» (near-miss)"
1. Введение
1.1. Актуальность проекта
В современных городах пробки на перекрёстках вызывают значительные задержки в движении, экономические потери и риски аварий. Традиционные системы управления светофорами (фиксированные циклы) не адаптируются к динамике трафика в реальном времени. Проект предлагает решение на основе компьютерного зрения (CV) для детекции и трекинга транспортных средств, анализа очередей и событий near-miss (ситуации, близкие к столкновениям, такие как Time To Collision, TTC < 2 секунд). Это позволит оптимизировать фазы светофора, минимизируя задержки и повышая безопасность.
1.2. Область применения
Система предназначена для установки на перекрёстках с видеонаблюдением. Прототип будет тестироваться на симуляторе SUMO (Simulation of Urban MObility) для валидации метрик (снижение задержек на 30-50%, уменьшение near-miss на 40-60%).
1.3. Технологический стек
CV и ML: YOLOv8 (детекция объектов), ByteTrack (трекинг), OpenCV (обработка видео).
Оптимизация: CVXPY (линейное программирование, LP).
Симуляция: SUMO с TraCI API.
Язык: Python 3.10+.
Метрики оценки: FPS (>15), точность детекции (>85%), средняя задержка (delay), коэффициент near-miss (кол-во событий / общее время).


2. Цели проекта
2.1. Основная цель
Разработать и реализовать систему оптимизации фаз светофора, интегрирующую данные CV для подсчёта очередей и анализа near-miss, с целью снижения пробок и повышения безопасности на перекрёстке.
2.2. Частные цели
Детектировать и трекать транспортные средства в реальном времени.
Оценивать длину очередей на подходах к перекрёстку.
Выявлять события near-miss и интегрировать их в модель оптимизации.
Оптимизировать длительность зелёного света и цикл светофора для минимизации задержек и рисков.
Валидировать систему в симуляторе SUMO.
3. Задачи проекта
Сбор и подготовка данных:
Собрать видео/датасеты перекрёстков (e.g., BDD100K или custom-видео).
Определить ROI (regions of interest) для подходов (полигоны для подсчёта очередей).
Разработка модуля CV:
Реализовать детекцию объектов (YOLOv8, класс "автомобиль").
Интегрировать трекинг (ByteTrack) для отслеживания траекторий и скоростей.
Подсчитывать очереди по траекториям (учёт направления движения).
Анализ near-miss:
Рассчитывать метрики TTC (Time To Collision) и PET (Post-Encroachment Time) для конфликтующих пар объектов.
Формировать риск-оценку для подходов.
Модуль оптимизации:
Построить модель LP для распределения фаз (доли зелёного g_i, длина цикла c).
Включить penalty за near-miss в целевую функцию.
Интеграция и тестирование:
Объединить в пайплайн (видео → детекция → оптимизация → вывод фаз).
Интегрировать с SUMO: симулировать трафик, применять фазы, измерять метрики.
Тестировать на сценариях: низкий/высокий трафик, near-miss события.
Документация и отчёт:
Описать архитектуру, формулы, результаты тестов.
Подготовить демо-видео и графики метрик.
4. Методы и подходы
Детекция и трекинг: Глубокое обучение (YOLO) + Kalman-фильтр в ByteTrack для предсказания позиций.
Подсчёт очередей: Геометрический анализ (point-in-polygon test) с учётом векторов скоростей.
Near-miss: Кинематические модели (TTC/PET) на основе относительных скоростей.
Оптимизация: Линейное программирование (LP) с ограничениями на безопасность и эффективность (вдохновлено Webster's model).
Валидация: A/B-тестирование в SUMO (baseline: фиксированные фазы vs. адаптивные).
5. Ожидаемые результаты
Рабочий прототип: Python-скрипт, обрабатывающий видео/симуляцию в реальном времени.
Метрики: Снижение средней задержки на 30-50%, уменьшение near-miss на 40-60% (по сравнению с baseline).
Документация: Отчёт с формулами, кодом, графиками (Matplotlib: delay vs. time, risk heatmap).
Масштабируемость: Готовность к интеграции с реальным контроллером (e.g., MQTT API).
